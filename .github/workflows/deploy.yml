name: Deploy to AWS

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'dev/dashboard/**'
      - 'k8s/**'
      - 'infra/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options: [dev, staging, prod]
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options: [plan, deploy, destroy]

# Needed for GHCR push with GITHUB_TOKEN/PAT
permissions:
  contents: read
  packages: write

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: core-banking-lab
  IMAGE_OWNER: ${{ github.repository_owner }}
  API_IMAGE: ghcr.io/${{ github.repository_owner }}/core-banking-lab/banking-api
  DASH_IMAGE: ghcr.io/${{ github.repository_owner }}/core-banking-lab/banking-dashboard

jobs:
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    outputs:
      api-image: ${{ env.API_IMAGE }}
      dash-image: ${{ env.DASH_IMAGE }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU (for multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR (PAT)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      # Optional: generate semver/sha/latest tags once, if you want more than :sha
      - name: Extract metadata for API
        id: meta_api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.API_IMAGE }}
          tags: |
            type=sha,format=long
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for Dashboard
        id: meta_dash
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DASH_IMAGE }}
          tags: |
            type=sha,format=long
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.api
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta_api.outputs.tags }}
          labels: ${{ steps.meta_api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Dashboard image
        uses: docker/build-push-action@v6
        with:
          context: ./dev/dashboard
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta_dash.outputs.tags }}
          labels: ${{ steps.meta_dash.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    needs: build
    environment: ${{ github.event.inputs.environment || 'dev' }}
    defaults:
      run:
        working-directory: infra/terraform
    outputs:
      instance-ip: ${{ steps.apply.outputs.instance_public_ip }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create terraform.tfvars
        shell: bash
        run: |
          {
            echo "aws_region   = \"${{ env.AWS_REGION }}\""
            echo "project_name = \"${{ env.PROJECT_NAME }}\""
            echo "environment  = \"${{ github.event.inputs.environment || 'dev' }}\""
            echo "instance_type = \"t4g.small\""
            echo "volume_size   = 20"
            echo "ssh_public_key = <<EOKEY"
          } > terraform.tfvars

          # Append the public key from secrets exactly as stored (supports multi-line)
          printf '%s\n' "${{ secrets.SSH_PUBLIC_KEY }}" >> terraform.tfvars

          # Close heredoc marker at column 1
          echo "EOKEY" >> terraform.tfvars

      - name: Terraform Init
        run: terraform init

      - name: Import existing key pair if it exists
        run: |
          if aws ec2 describe-key-pairs --key-names core-banking-lab-key --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "Key pair exists, importing to Terraform state..."
            terraform import aws_key_pair.main core-banking-lab-key || echo "Key pair already in state or import failed"
          else
            echo "Key pair does not exist, Terraform will create it"
          fi

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        shell: bash
        run: |
          set +e
          terraform plan -input=false -no-color -detailed-exitcode -out=tfplan
          status=$?
          echo "exitcode=$status" >> $GITHUB_OUTPUT
          # 1 = error -> fail the job
          if [ "$status" -eq 1 ]; then
            echo "::error::Terraform plan failed (exit 1)"
            exit 1
          fi
          # 0 = no changes, 2 = changes -> continue
          exit 0

      - name: Terraform Apply
        id: apply
        if: steps.plan.outputs.exitcode == '2' && (github.event.inputs.action != 'plan' && (github.event.inputs.action == 'deploy' || github.ref == 'refs/heads/main'))
        run: |
          terraform apply -input=false -no-color -auto-approve tfplan
          echo "instance_public_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: terraform destroy -input=false -no-color -auto-approve


  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [build, terraform]
    if: needs.terraform.outputs.instance-ip && github.event.inputs.action != 'destroy'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    defaults:
      run:
        working-directory: infra/ansible

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Ansible and dependencies
        run: |
          pip install ansible boto3 botocore kubernetes
          ansible-galaxy collection install -r requirements.yml

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/core-banking-lab-key
          chmod 600 ~/.ssh/core-banking-lab-key

      - name: Wait for SSH to be ready
        run: |
          for i in {1..30}; do
            if ssh -i ~/.ssh/core-banking-lab-key -o ConnectTimeout=5 -o StrictHostKeyChecking=no ubuntu@${{ needs.terraform.outputs.instance-ip }} echo "SSH Ready"; then
              break
            fi
            echo "Waiting for SSH... (attempt $i/30)"
            sleep 10
          done

      - name: Update Kubernetes manifests with new images
        run: |
          sed -i 's|image: banking-api:latest|image: '"${API_IMAGE}"':'"${{ github.sha }}"'|g' ../../k8s/01-api-deployment.yaml
          sed -i 's|image: banking-dashboard:latest|image: '"${DASH_IMAGE}"':'"${{ github.sha }}"'|g' ../../k8s/02-dashboard-deployment.yaml
          sed -i 's|imagePullPolicy: Never|imagePullPolicy: Always|g' ../../k8s/*.yaml

      - name: Run Ansible playbook
        run: |
          ansible-playbook -i inventory/aws_ec2.yml playbooks/deploy.yml \
            --extra-vars "target_host=${{ needs.terraform.outputs.instance-ip }}"

      - name: Display deployment information
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "üìç Instance IP: ${{ needs.terraform.outputs.instance-ip }}"
          echo "üîó Application URLs:"
          echo "   ‚Ä¢ Banking API: http://${{ needs.terraform.outputs.instance-ip }}:8080"
          echo "   ‚Ä¢ Dashboard: http://${{ needs.terraform.outputs.instance-ip }}:3000"
          echo "   ‚Ä¢ Prometheus: http://${{ needs.terraform.outputs.instance-ip }}:9090"
          echo "   ‚Ä¢ Grafana: http://${{ needs.terraform.outputs.instance-ip }}:3001"
