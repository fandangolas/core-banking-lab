name: Deploy to AWS

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'dev/dashboard/**'
      - 'k8s/**'
      - 'infra/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options: [dev, staging, prod]
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options: [plan, deploy, destroy]

# Needed for GHCR push with GITHUB_TOKEN/PAT
permissions:
  contents: read
  packages: write

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: core-banking-lab
  IMAGE_OWNER: ${{ github.repository_owner }}
  API_IMAGE: ghcr.io/${{ github.repository_owner }}/core-banking-lab/banking-api
  DASH_IMAGE: ghcr.io/${{ github.repository_owner }}/core-banking-lab/banking-dashboard

jobs:
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    outputs:
      api-image: ${{ env.API_IMAGE }}
      dash-image: ${{ env.DASH_IMAGE }}
      should-build: ${{ steps.changes.outputs.app }}
      should-deploy: ${{ steps.changes.outputs.app == 'true' || steps.changes.outputs.infra == 'true' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for application changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            app:
              - 'src/**'
              - 'dev/dashboard/**'
            infra:
              - 'k8s/**'
              - 'infra/**'
              - 'go.mod'
              - 'go.sum'
              - 'Dockerfile.api'
              - 'package*.json'

      - name: Set up QEMU (for multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR (PAT)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      # Optional: generate semver/sha/latest tags once, if you want more than :sha
      - name: Extract metadata for API
        id: meta_api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.API_IMAGE }}
          tags: |
            type=sha,format=long
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for Dashboard
        id: meta_dash
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DASH_IMAGE }}
          tags: |
            type=sha,format=long
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push API image
        if: steps.changes.outputs.app == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.api
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta_api.outputs.tags }}
          labels: ${{ steps.meta_api.outputs.labels }}
          cache-from: type=gha,scope=api-arm64
          cache-to: type=gha,scope=api-arm64,mode=max

      - name: Build and push Dashboard image
        if: steps.changes.outputs.app == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ./dev/dashboard
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta_dash.outputs.tags }}
          labels: ${{ steps.meta_dash.outputs.labels }}
          cache-from: type=gha,scope=dash-arm64
          cache-to: type=gha,scope=dash-arm64,mode=max

  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    needs: build
    environment: ${{ github.event.inputs.environment || 'dev' }}
    defaults:
      run:
        working-directory: infra/terraform
    outputs:
      instance-ip: ${{ steps.apply.outputs.instance_public_ip }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create terraform.tfvars
        shell: bash
        run: |
          cat > terraform.tfvars << 'EOF'
          aws_region   = "${{ env.AWS_REGION }}"
          project_name = "${{ env.PROJECT_NAME }}"
          environment  = "${{ github.event.inputs.environment || 'dev' }}"
          instance_type = "t4g.small"
          volume_size   = 20
          ssh_public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC4Gf/5OQ1Vov/xoiS17cGKK50AQrwV//Tk9I2YClMCxHKCN/KYDMDUELZ5HFIUA3zDiw/SVcBSvF1U+cXvQnCRnajMJyeohG4AIgrKcov5aeVBRUDevOcVZswXhVIWumXiPTQfv2E0PCVrsIhaXe8g4PPqB5MCPpsaMVcL3/czxaZN9pPbdVzYnXSMgjm2p2AQK7iFDrDfaLAR0R+0qI7i+ln4kjji7t19CgkV/FIzulhAH8s3AK2AhD2zrWbTZko8FHkCwGTBx9sxZ+AdmmXcDCQmfmhvA9ympAbvOD9jNK/mPH/hisgbpR45TS5w04cjSHZYYhGN2DlNO2QtNThkmNrgPPAunZyMWcLEtvvzB4URrAHOlL7MwsJCASJkU+oSv25k5P5m6FArZ87VthVc9wNP+eke5R+V7ZPdjq3u6B2zG/b7+7uQ8vSGPmXaoPTvbjt2fbELSG1IVtwti/ctndIvngYDiW2mwR2gR6Qano9+GlDJiJpDUJLGwfpNCHD1lt3NIiFilTNvN8d3qMWHU9vnvgcwKA8ZmWW2nwqbMONVNAk8Iagg71ucNrVZJCQMdOwsO9m0pSGTPpc//ONNOii+wksXdx51FRf7XT6b5KH++I9DDylzrwoKr942s7uF+blvecj8AuNv3joswUPMTuy7buPlR03n48UvjusqYw== core-banking-lab-deployment"
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Synchronize Terraform state with AWS reality
        run: |
          echo "Checking for state/reality mismatches..."
          
          # Check if key pair exists in state but not in AWS (common after manual cleanups)
          if terraform state list | grep -q "aws_key_pair.main"; then
            if ! aws ec2 describe-key-pairs --key-names core-banking-lab-key --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
              echo "Key pair exists in Terraform state but not in AWS - removing from state"
              terraform state rm aws_key_pair.main
            else
              echo "Key pair exists in both state and AWS - checking for import"
              # Try to refresh state to ensure it's properly synced
              terraform plan -detailed-exitcode -out=/dev/null >/dev/null 2>&1 || echo "State refresh completed"
            fi
          else
            echo "Key pair not in Terraform state"
          fi
          
          # Only clean up truly orphaned VPCs (those not in current state)
          current_vpc=$(terraform show -json 2>/dev/null | jq -r '.values.root_module.resources[]? | select(.address == "aws_vpc.main") | .values.id' 2>/dev/null || echo "")
          if [ ! -z "$current_vpc" ]; then
            echo "Current VPC in state: $current_vpc"
            echo "Checking for duplicate VPCs to clean up..."
            aws ec2 describe-vpcs --region ${{ env.AWS_REGION }} --filters "Name=tag:Project,Values=core-banking-lab" "Name=state,Values=available" --query 'Vpcs[].VpcId' --output text | tr '\t' '\n' | while read vpc_id; do
              if [ "$vpc_id" != "$current_vpc" ] && [ ! -z "$vpc_id" ]; then
                echo "Found orphaned VPC to clean up: $vpc_id"
                # Basic cleanup attempt (best effort)
                aws ec2 delete-vpc --region ${{ env.AWS_REGION }} --vpc-id $vpc_id >/dev/null 2>&1 && echo "Cleaned up $vpc_id" || echo "Could not clean up $vpc_id (has dependencies)"
              fi
            done
          else
            echo "No VPC found in current Terraform state"
          fi

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        shell: bash
        run: |
          set +e
          terraform plan -input=false -no-color -detailed-exitcode -out=tfplan
          status=$?
          echo "exitcode=$status" >> $GITHUB_OUTPUT
          
          # Check if plan failed due to key pair issues
          if [ "$status" -eq 1 ]; then
            echo "Terraform plan failed, checking for key pair issues..."
            if terraform plan -input=false -no-color 2>&1 | grep -q "InvalidKey.Format\|aws_key_pair"; then
              echo "Key pair format issue detected. Attempting to delete existing key pair and recreate..."
              aws ec2 delete-key-pair --key-name core-banking-lab-key --region ${{ env.AWS_REGION }} || echo "Key pair deletion failed or doesn't exist"
              echo "Re-running terraform plan after key pair cleanup..."
              terraform plan -input=false -no-color -detailed-exitcode -out=tfplan
              status=$?
              echo "exitcode=$status" >> $GITHUB_OUTPUT
            fi
            
            if [ "$status" -eq 1 ]; then
              echo "::error::Terraform plan failed (exit 1)"
              exit 1
            fi
          fi
          # 0 = no changes, 2 = changes -> continue
          exit 0

      - name: Terraform Apply
        id: apply
        if: (steps.plan.outputs.exitcode == '2' || needs.build.outputs.should-deploy == 'true') && (github.event.inputs.action != 'plan' && (github.event.inputs.action == 'deploy' || github.ref == 'refs/heads/main'))
        run: |
          if [ "${{ steps.plan.outputs.exitcode }}" == "2" ]; then
            echo "Infrastructure changes detected - applying terraform plan"
            terraform apply -input=false -no-color -auto-approve tfplan
          else
            echo "No infrastructure changes but new images built - ensuring infrastructure is ready"
            terraform apply -input=false -no-color -auto-approve -refresh-only
          fi
          echo "instance_public_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: terraform destroy -input=false -no-color -auto-approve


  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [build, terraform]
    if: needs.terraform.outputs.instance-ip && github.event.inputs.action != 'destroy' && (needs.build.outputs.should-deploy == 'true' || needs.terraform.result == 'success')
    environment: ${{ github.event.inputs.environment || 'dev' }}
    defaults:
      run:
        working-directory: infra/ansible

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Ansible and dependencies
        run: |
          pip install ansible boto3 botocore kubernetes
          ansible-galaxy collection install -r requirements.yml

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/core-banking-lab-key
          chmod 600 ~/.ssh/core-banking-lab-key
          chmod 700 ~/.ssh
          # Verify key format and permissions
          ls -la ~/.ssh/core-banking-lab-key
          file ~/.ssh/core-banking-lab-key || echo "File command not available"
          # Test key validation
          ssh-keygen -y -f ~/.ssh/core-banking-lab-key > /dev/null && echo "SSH key is valid" || echo "SSH key validation failed"

      - name: Wait for SSH to be ready
        run: |
          # Add SSH config for better debugging
          cat > ~/.ssh/config << 'EOF'
          Host *
              StrictHostKeyChecking no
              UserKnownHostsFile /dev/null
              LogLevel ERROR
          EOF
          
          echo "Testing SSH connection to ${{ needs.terraform.outputs.instance-ip }}"
          for i in {1..30}; do
            if ssh -i ~/.ssh/core-banking-lab-key -o ConnectTimeout=10 -v ubuntu@${{ needs.terraform.outputs.instance-ip }} echo "SSH Ready" 2>&1; then
              echo "SSH connection successful on attempt $i"
              break
            fi
            echo "Waiting for SSH... (attempt $i/30)"
            if [ $i -eq 30 ]; then
              echo "Final attempt failed. Checking key and connection details:"
              ssh-keygen -y -f ~/.ssh/core-banking-lab-key || echo "Private key validation failed"
              nc -zv ${{ needs.terraform.outputs.instance-ip }} 22 || echo "Port 22 not reachable"
              exit 1
            fi
            sleep 10
          done

      - name: Update Kubernetes manifests with new images
        run: |
          sed -i 's|image: banking-api:latest|image: '"${API_IMAGE}"':sha-'"${{ github.sha }}"'|g' ../../k8s/01-api-deployment.yaml
          sed -i 's|image: banking-dashboard:latest|image: '"${DASH_IMAGE}"':sha-'"${{ github.sha }}"'|g' ../../k8s/02-dashboard-deployment.yaml
          sed -i 's|imagePullPolicy: Never|imagePullPolicy: Always|g' ../../k8s/*.yaml

      - name: Run Ansible playbook
        run: |
          ansible-playbook -i inventory/aws_ec2.yml playbooks/deploy.yml \
            --extra-vars "target_host=${{ needs.terraform.outputs.instance-ip }}" \
            --extra-vars "github_actor=${{ github.actor }}" \
            --extra-vars "github_token=${{ secrets.GHCR_PAT }}"

      - name: Display deployment information
        run: |
          echo "🚀 Deployment completed successfully!"
          echo "📍 Instance IP: ${{ needs.terraform.outputs.instance-ip }}"
          echo "🔗 Application URLs:"
          echo "   • Banking API: http://${{ needs.terraform.outputs.instance-ip }}:30080"
          echo "   • Dashboard: http://${{ needs.terraform.outputs.instance-ip }}:30000"
          echo "   • Prometheus: http://${{ needs.terraform.outputs.instance-ip }}:30090"
          echo "   • Grafana: http://${{ needs.terraform.outputs.instance-ip }}:30030"
